sys_prompt: |
  You are **MDQ-Retriever-Code**, an assistant designed to help physicians accurately convert patient responses from medical questionnaires into corresponding scores. Follow these guidelines strictly:

  1. **Understand the Request:** Precisely identify the information the physician is asking for. Pay close attention to the specific data or insights required.

  2. **Select Relevant Questions:** Carefully examine the provided questionnaire and identify the question that is most relevant to the physician's request. Only select one question that directly relates to the required information.

  3. **Score Mapping:** Write Python code to convert the answer from the selected questions into corresponding scores. Clearly explain how each score is determined by providing comments in the code.

  4. **DataFrame Generation:** Write Python code to make a dataframe of the mapped answers. Ensure that every step in the process is meticulously detailed and include comments that describe what each section of the code does.

  Your goal is to ensure that the Python code you generate is both accurate and relevant, with clear and transparent scoring calculations. Always include comments to explain each part of the code.
usr_prompt1: |
  <Score mapping dictionary>
  {'Q1': {'Poor': 0.0, 'Fair': 25.0, 'Good': 50.0, 'Very good': 75.0, 'Excellent': 100.0}, 
  'Q2': {'Much worse now than one year ago': 0.0, 'Somewhat worse now than one year ago': 25.0, 'About the same than one year ago': 50.0, 'Somewhat better now than one year ago': 75.0, 'Much better now than one year ago': 100.0}, 
  'Q3': {'Yes, limited a lot': 0.0, 'Yes, limited a little': 50.0, 'No, not limited at all': 100.0}, 
  'Q4 / Q5': {'Yes': 0.0, 'No': 100.0}, 
  'Q6': {'Extremely': 0.0, 'Quite a bit': 25.0, 'Moderately': 50.0, 'Slightly': 75.0, 'Not at all': 100.0}, 
  'Q7': {'Very severe': 0.0, 'Severe': 20.0, 'Moderate': 40.0, 'Mild': 60.0, 'Very mild': 80.0, 'None': 100.0}, 
  'Q8': {'Extremely': 0.0, 'Quite a bit': 25.0, 'Moderately': 50.0, 'A little bit': 75.0, 'Not at all': 100.0}, 
  'Q9 a,d,e,h': {'None of the time': 0.0, 'A little of the time': 20.0, 'Some of the time': 40.0, 'A good bit of the time': 60.0, 'Most of the time': 80.0, 'All of the time': 100.0}, 
  'Q9 b,c,f,g,i': {'All of the time': 0.0, 'Most of the time': 20.0, 'A good bit of the time': 40.0, 'Some of the time': 60.0, 'A little of the time': 80.0, 'None of the time': 100.0}, 
  'Q10': {'All of the time': 0.0, 'Most of the time': 25.0, 'Some of the time': 50.0, 'A little of the time': 75.0, 'None of the time': 100.0}, 
  'Q11 a,c': {'Definitely true': 0.0, 'Mostly true': 25.0, 'Don\'t know': 50.0, 'Mostly false': 75.0, 'Definitely false': 100.0}, 
  'Q11 b,d': {'Definitely false': 0.0, 'Mostly false': 25.0, 'Don\'t know': 50.0, 'Mostly true': 75.0, 'Definitely true': 100.0}, 
  'Q12': {'Definitely true': 0.0, 'Mostly true': 25.0, 'Don\'t know': 50.0, 'Mostly false': 75.0, 'Definitely false': 100.0}, 
  'Q13 a-d, f': {'All of the time': 0.0, 'Most of the time': 20.0, 'A good bit of the time': 40.0, 'Some of the time': 60.0, 'A little of the time': 80.0, 'None of the time': 100.0}, 
  'Q13 e': {'None of the time': 0.0, 'A little of the time': 20.0, 'Some of the time': 40.0, 'A good bit of the time': 60.0, 'Most of the time': 80.0, 'All of the time': 100.0}, 
  'Q14': {'Extremely bothered': 0.0, 'Very much bothered': 25.0, 'Moderately bothered': 50.0, 'Somewhat bothered': 75.0, 'Not at all bothered': 100.0}, 
  'Q15': {'Extremely bothered': 0.0, 'Very much bothered': 25.0, 'Moderately bothered': 50.0, 'Somewhat bothered': 75.0, 'Not at all bothered': 100.0}, 
  'Q16': {'No': 0.0, 'Yes': 100.0}, 
  'Q16 a,b': {'Severe problem': 0.0, 'Very much a problem': 25.0, 'Somewhat of a problem': 50.0, 'A little problem': 75.0, 'Not a problem': 100.0}, 
  'Q18 a,c': {'All of the time': 0.0, 'Most of the time': 20.0, 'A good bit of the time': 40.0, 'Some of the time': 60.0, 'A little of the time': 80.0, 'None of the time': 100.0}, 
  'Q18 b': {'None of the time': 0.0, 'A little of the time': 20.0, 'Some of the time': 40.0, 'A good bit of the time': 60.0, 'Most of the time': 80.0, 'All of the time': 100.0}, 
  'Q19': {'Very dissatisfied': 0.0, 'Somewhat dissatisfied': 33.33, 'Somewhat satisfied': 66.67, 'Very satisfied': 100.0}, 
  'Q20': {'No': 0.0, 'Yes': 100.0}, 
  'Q21': {'Yes': 0.0, 'No': 100.0}, 
  'Q23': {'Very poor': 0.0, 'Poor': 16.67, 'Fair': 33.33, 'Good': 50.0, 'Very good': 66.67, 'Excellent': 83.33, 'The best': 100.0}, 
  'Q24': {'Definitely false': 0.0, 'Mostly false': 25.0, 'Don\'t know': 50.0, 'Mostly true': 75.0, 'Definitely true': 100.0}}
  
  Given the following information:
  
  - **<KDQOL>**: The form of KDQOL survey, which assesses the quality of life in kidney dialysis patients.
  - **<Score Mapping Dictionary>**: A guide on how to convert each survey response into a score.

  Please write Python code to answer the physician's questions below:
usr_prompt2: |
  - For each given question, carefully extract the relevant items from the KDQOL survey based on the question
  - Map the responses to scores using the **<Score Mapping Dictionary>**
  - Calculate the average score of the questions for each KDQOL domain.
  - If any response is `nan`, remove it when calculating the average score for each KDQOL domain.
  - For each patient, compare the domain scores from the 1st survey and the 2nd survey and then determine whether the score has improved.

  Finally, write Python code that provides the improvement of KDQOL domain scores for every patient in the **DataFrame** format:

  **Example Structure:**

  ```python
    import pandas as pd
    import numpy as np

    # Load the DataFrame containing all the patients' responses
    df = pd.read_csv("../eng_base_sub.csv") # no need to modify the path
    # df.columns = ['id', '1', '2', '3a', '3b', '3c', '3d', '3e', '3f', '3g', '3h', '3i', '3j', '4a', '4b', '4c', '4d', '5a', '5b', '5c', '6', '7', '8', '9a', '9b', '9c', '9d', '9e', '9f', '9g', '9h', '9i', '10', '11a', '11b', '11c', '11d', '12a', '12b', '12c', '12d', '13a', '13b', '13c', '13d', '13e', '13f', '14a', '14b', '14c', '14d', '14e', '14f', '14g', '14h', '14i', '14j', '14k', '14l', '15a', '15b', '15c', '15d', '15e', '15f', '15g', '15h', '16', '16a', '16b', '17', '18a', '18b', '18c', '19a', '19b', '20', '21', '22', '23', '24a', '24b']

    # Define the mapping of responses to scores
    score_mapping = {
        'Q3': {'Yes, limited a lot': 0.0, 'Yes, limited a little': 50.0, 'No, not limited at all': 100.0},
        'Q7': {'Very severe': 0.0, 'Severe': 20.0, 'Moderate': 40.0, 'Mild': 60.0, 'Very mild': 80.0, 'None': 100.0},
        'Q9 a,d,e,h': {'None of the time': 0.0, 'A little of the time': 20.0, 'Some of the time': 40.0, 'A good bit of the time': 60.0, 'Most of the time': 80.0, 'All of the time': 100.0},
        'Q11 b,d': {'Definitely false': 0.0, 'Mostly false': 25.0, 'Don\'t know': 50.0, 'Mostly true': 75.0, 'Definitely true': 100.0},
        'Q14': {'Extremely bothered': 0.0, 'Very much bothered': 25.0, 'Moderately bothered': 50.0, 'Somewhat bothered': 75.0, 'Not at all bothered': 100.0},
        'Q16 a,b': {'Severe problem': 0.0, 'Very much a problem': 25.0, 'Somewhat of a problem': 50.0, 'A little problem': 75.0, 'Not a problem': 100.0}, 
        'Q18 a,c': {'All of the time': 0.0, 'Most of the time': 20.0, 'A good bit of the time': 40.0, 'Some of the time': 60.0, 'A little of the time': 80.0, 'None of the time': 100.0}, 
    }

    # Map each column in `df` to the corresponding keys in the `score_mapping` dictionary
    column_to_key = {
    '1': 'Q1', '2': 'Q2', '3a': 'Q3', '3b': 'Q3', '3c': 'Q3', '3d': 'Q3', '3e': 'Q3', '3f': 'Q3', '3g': 'Q3', '3h': 'Q3', '3i': 'Q3', '3j': 'Q3',
    '4a': 'Q4 / Q5', '4b': 'Q4 / Q5', '4c': 'Q4 / Q5', '4d': 'Q4 / Q5', '5a': 'Q4 / Q5', '5b': 'Q4 / Q5', '5c': 'Q4 / Q5', '6': 'Q6', '7': 'Q7', '8': 'Q8',
    '9a': 'Q9 a,d,e,h', '9b': 'Q9 b,c,f,g,i', '9c': 'Q9 b,c,f,g,i', '9d': 'Q9 a,d,e,h', '9e': 'Q9 a,d,e,h', '9f': 'Q9 b,c,f,g,i', '9g': 'Q9 b,c,f,g,i', '9h': 'Q9 a,d,e,h', '9i': 'Q9 b,c,f,g,i',
    '10': 'Q10', '11a': 'Q11 a,c', '11b': 'Q11 b,d', '11c': 'Q11 a,c', '11d': 'Q11 b,d', '12a': 'Q12', '12b': 'Q12', '12c': 'Q12', '12d': 'Q12',
    '13a': 'Q13 a-d, f', '13b': 'Q13 a-d, f', '13c': 'Q13 a-d, f', '13d': 'Q13 a-d, f', '13e': 'Q13 e', '13f': 'Q13 a-d, f', '14a': 'Q14', '14b': 'Q14', '14c': 'Q14', '14d': 'Q14', '14e': 'Q14', '14f': 'Q14', '14g': 'Q14', '14h': 'Q14', '14i': 'Q14', '14j': 'Q14', '14k': 'Q14', '14l': 'Q14',
    '15a': 'Q15', '15b': 'Q15', '15c': 'Q15', '15d': 'Q15', '15e': 'Q15', '15f': 'Q15', '15g': 'Q15', '15h': 'Q15', '16': 'Q16', '16a': 'Q16 a,b', '16b': 'Q16 a,b',
    '18a': 'Q18 a,c', '18b': 'Q18 b', '18c': 'Q18 a,c', '19a': 'Q19', '19b': 'Q19', '20': 'Q20', '21': 'Q21', '22': 'Q22', '23': 'Q23', '24a': 'Q24', '24b': 'Q24'
    }

    # Assign each list of survey items to the corresponding items in the KDQOL survey
    question_to_items = {
        "Has the Quality of social interaction score improved?": ["13a", "13c", "13e"],
        "Has the Social support score improved?": ["19a", "19b"],
        "Has the Dialysis staff encouragement score improved?": ["24a", "24b"]
    }

    # Function to map responses to scores
    def map_responses_to_scores(response, question):
        mapping = score_mapping.get(question, {})
        return mapping.get(response, np.nan)

    # Create a DataFrame to store whether the score has improved for each question
    improve_df = pd.DataFrame(columns=questions.keys())

    # Group by 'id' and map responses to scores, then check if the score has improved
    for i, (_, group) in enumerate(df.groupby('id')):
        for domain, columns in kdqol_domains.items():
            scores = []
            for col in columns:
                question = column_to_question.get(col, None)
                if question:
                    scores.append(group[col].apply(lambda x: map_responses_to_scores(x, question)))
            scores_df[domain] = pd.concat(scores, axis=1).mean(axis=1, skipna=True)
            improved = (scores_df.iloc[1] - scores_df.iloc[0]) > 0
            # Store the result in the DataFrame
            improve_df.loc[i, domain] = improved

    # Save the DataFrame of score improvements to a CSV file
    improve_df.to_csv("improve_df.csv", index=False)
  ```